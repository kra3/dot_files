#!/bin/bash
# Development tools installation for dotfiles
# This script runs once on first chezmoi apply

set -e

echo "üì¶ Installing development tools..."
echo ""

{{- if eq .chezmoi.os "darwin" }}
# macOS installation via Homebrew
if ! command -v brew &> /dev/null; then
    echo "‚ö†Ô∏è  Homebrew not found. Please install it first:"
    echo "  /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
    exit 1
fi

echo "üç∫ Installing via Homebrew..."
echo ""

# Core tools
brew install \
    git \
    git-delta \
    git-absorb \
    difftastic \
    gh \
    lazygit \
    tmux \
    fzf \
    fd \
    zoxide \
    sesh \
    eza \
    bat \
    ripgrep \
    vim \
    curl \
    jq \
    node \
    awscli \
    docker \
    docker-compose

# Shell enhancements
brew install \
    zsh-completions \
    direnv \
    colordiff \
    lesspipe \
    bc \
    vivid

# Version managers
brew install \
    pyenv \
    pyenv-virtualenv \
    jenv \
    nvm

# Build tools
brew tap gdubw/gng
brew install gng  # Gradle/Maven wrapper (provides 'gw' command)

# AI/ML tools
brew install ollama

{{- else if eq .chezmoi.os "linux" }}
# Linux installation
if command -v apt-get &> /dev/null; then
    echo "üì¶ Installing via apt..."
    sudo apt-get update

    # Core tools
    sudo apt-get install -y \
        git \
        tmux \
        fzf \
        fd-find \
        ripgrep \
        gh \
        vim \
        curl \
        jq \
        docker.io \
        docker-compose

    # AWS CLI (via pip if not available)
    if ! command -v aws &> /dev/null; then
        echo "Installing AWS CLI..."
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
        unzip -q /tmp/awscliv2.zip -d /tmp
        sudo /tmp/aws/install
        rm -rf /tmp/aws /tmp/awscliv2.zip
    fi

    # Shell enhancements (if available)
    sudo apt-get install -y \
        direnv \
        colordiff \
        bc \
        zoxide \
        eza \
        bat 2>/dev/null || echo "‚ö†Ô∏è  Some packages not available via apt"

    # Linux desktop environment (X11/i3/dwm) - optional
    echo ""
    read -p "üì¶ Install Linux desktop environment tools (i3, irssi, conky, X11 utils)? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Installing desktop environment tools..."
        sudo apt-get install -y \
            i3 \
            i3status \
            i3lock \
            rofi \
            picom \
            xautolock \
            unclutter \
            irssi \
            conky-all \
            rxvt-unicode \
            xterm \
            ibus \
            ibus-gtk \
            ibus-gtk3 \
            imagemagick \
            libnotify-bin \
            python3-gi \
            python3-dbus \
            gir1.2-notify-0.7 \
            libcanberra-gtk-module 2>/dev/null || echo "‚ö†Ô∏è  Some desktop packages not available"
        echo "‚úÖ Desktop environment tools installed"
    else
        echo "‚è≠Ô∏è  Skipping desktop environment tools"
    fi

    # Version managers
    echo ""
    echo "Installing pyenv..."
    if [ ! -d "$HOME/.pyenv" ]; then
        curl https://pyenv.run | bash
    fi

    # AI/ML tools
    echo ""
    if ! command -v ollama &> /dev/null; then
        echo "Installing Ollama..."
        curl -fsSL https://ollama.com/install.sh | sh
    fi

    # Install Nerd Fonts (Linux)
    echo ""
    echo "üì• Installing Nerd Fonts..."
    FONT_DIR="$HOME/.local/share/fonts"
    mkdir -p "$FONT_DIR"

    # Install MesloLGS NF (for Powerlevel10k)
    if ! fc-list 2>/dev/null | grep -q "MesloLGS NF"; then
        echo "  ‚Üí Installing MesloLGS NF (recommended for Powerlevel10k)..."
        MESLO_URL="https://github.com/romkatv/powerlevel10k-media/raw/master"
        curl -fsSL -o "$FONT_DIR/MesloLGS NF Regular.ttf" "$MESLO_URL/MesloLGS%20NF%20Regular.ttf"
        curl -fsSL -o "$FONT_DIR/MesloLGS NF Bold.ttf" "$MESLO_URL/MesloLGS%20NF%20Bold.ttf"
        curl -fsSL -o "$FONT_DIR/MesloLGS NF Italic.ttf" "$MESLO_URL/MesloLGS%20NF%20Italic.ttf"
        curl -fsSL -o "$FONT_DIR/MesloLGS NF Bold Italic.ttf" "$MESLO_URL/MesloLGS%20NF%20Bold%20Italic.ttf"
        fc-cache -fv > /dev/null 2>&1
        echo "  ‚úÖ MesloLGS NF installed"
    else
        echo "  ‚úÖ MesloLGS NF already installed"
    fi

    # Install FuraCode NF (for terminals, editors, general use)
    if ! fc-list 2>/dev/null | grep -q "FiraCode.*Nerd"; then
        echo "  ‚Üí Installing FuraCode NF (for editors and general use)..."
        NERD_FONT_VERSION="v3.3.0"
        FIRACODE_URL="https://github.com/ryanoasis/nerd-fonts/releases/download/${NERD_FONT_VERSION}/FiraCode.zip"

        curl -fsSL -o "/tmp/FiraCode.zip" "$FIRACODE_URL"
        unzip -q -o "/tmp/FiraCode.zip" -d "$FONT_DIR" "*.ttf" "*.otf" 2>/dev/null || true
        rm -f "/tmp/FiraCode.zip"
        fc-cache -fv > /dev/null 2>&1
        echo "  ‚úÖ FuraCode NF installed"
    else
        echo "  ‚úÖ FuraCode NF already installed"
    fi

    echo "‚úÖ Nerd Fonts installation complete"

    echo ""
    echo "‚ö†Ô∏è  Some tools need manual installation:"
    [ ! -x "$(command -v sesh)" ] && echo "  ‚Ä¢ sesh: https://github.com/joshmedeski/sesh/releases"
    [ ! -x "$(command -v lazygit)" ] && echo "  ‚Ä¢ lazygit: https://github.com/jesseduffield/lazygit/releases"
    [ ! -x "$(command -v git-absorb)" ] && echo "  ‚Ä¢ git-absorb: https://github.com/tummychow/git-absorb/releases"
    [ ! -x "$(command -v difft)" ] && echo "  ‚Ä¢ difftastic: https://github.com/Wilfred/difftastic/releases"
    [ ! -x "$(command -v git-delta)" ] && echo "  ‚Ä¢ git-delta: https://github.com/dandavison/delta/releases"
    [ ! -x "$(command -v jenv)" ] && echo "  ‚Ä¢ jenv: https://github.com/jenv/jenv"
    [ ! -d "$HOME/.nvm" ] && echo "  ‚Ä¢ nvm: https://github.com/nvm-sh/nvm"

elif command -v yum &> /dev/null; then
    echo "üì¶ Installing via yum..."

    # Install available packages
    sudo yum install -y \
        git \
        tmux \
        fzf \
        fd-find \
        zoxide \
        eza \
        bat \
        ripgrep

    # GitHub CLI
    if ! command -v gh &> /dev/null; then
        sudo yum install -y 'dnf-command(config-manager)'
        sudo yum-config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
        sudo yum install -y gh
    fi

    echo ""
    echo "‚ö†Ô∏è  Some tools need manual installation:"
    echo "  ‚Ä¢ sesh: https://github.com/joshmedeski/sesh/releases"
    echo "  ‚Ä¢ lazygit: https://github.com/jesseduffield/lazygit/releases"
    echo "  ‚Ä¢ git-delta: https://github.com/dandavison/delta/releases"
    echo "  ‚Ä¢ git-absorb: https://github.com/tummychow/git-absorb/releases"
    echo "  ‚Ä¢ difftastic: https://github.com/Wilfred/difftastic/releases"
else
    echo "‚ö†Ô∏è  Unknown package manager. Install manually:"
    echo ""
    echo "Core tools:"
    echo "  ‚Ä¢ git, tmux, fzf, fd, zoxide, sesh, eza, bat, ripgrep"
    echo ""
    echo "Git tools:"
    echo "  ‚Ä¢ git-delta: https://github.com/dandavison/delta"
    echo "  ‚Ä¢ git-absorb: https://github.com/tummychow/git-absorb"
    echo "  ‚Ä¢ difftastic: https://github.com/Wilfred/difftastic"
    echo "  ‚Ä¢ gh: https://cli.github.com/"
    exit 1
fi
{{- end }}

# Install TPM (Tmux Plugin Manager)
echo ""
if [ ! -d ~/.tmux/plugins/tpm ]; then
    echo "üì• Installing TPM (Tmux Plugin Manager)..."
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
    echo "‚úÖ TPM installed"
else
    echo "‚úÖ TPM already installed"
fi

# Install Catppuccin for Tmux (manual installation - recommended over TPM)
echo ""
if [ ! -d ~/.tmux/plugins/catppuccin ]; then
    echo "üì• Installing Catppuccin for Tmux..."
    mkdir -p ~/.tmux/plugins
    git clone -b v2.1.3 https://github.com/catppuccin/tmux.git ~/.tmux/plugins/catppuccin
    echo "‚úÖ Catppuccin for Tmux installed"
else
    echo "‚úÖ Catppuccin for Tmux already installed"
fi

# Install Zinit (Zsh Plugin Manager)
echo ""
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
if [ ! -d "$ZINIT_HOME" ]; then
    echo "üì• Installing Zinit (Zsh Plugin Manager)..."
    mkdir -p "$(dirname "$ZINIT_HOME")"
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
    echo "‚úÖ Zinit installed"
else
    echo "‚úÖ Zinit already installed"
fi

# Install vim-plug (Vim Plugin Manager)
echo ""
if [ ! -f ~/.vim/autoload/plug.vim ]; then
    echo "üì• Installing vim-plug (Vim Plugin Manager)..."
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    echo "‚úÖ vim-plug installed"
else
    echo "‚úÖ vim-plug already installed"
fi

# Install Catppuccin theme for bat
echo ""
BAT_THEME_DIR="$(bat --config-dir)/themes"
if [ ! -f "$BAT_THEME_DIR/Catppuccin Mocha.tmTheme" ]; then
    echo "üì• Installing Catppuccin theme for bat..."
    mkdir -p "$BAT_THEME_DIR"

    curl -fsSL -o "$BAT_THEME_DIR/Catppuccin Mocha.tmTheme" \
        https://raw.githubusercontent.com/catppuccin/bat/main/themes/Catppuccin%20Mocha.tmTheme

    # Rebuild bat cache
    bat cache --build > /dev/null 2>&1

    echo "‚úÖ Catppuccin theme installed for bat"
else
    echo "‚úÖ Catppuccin theme already installed for bat"
fi

# Install gh-dash (GitHub CLI Dashboard extension)
echo ""
if command -v gh &> /dev/null; then
    if ! gh extension list 2>/dev/null | grep -q "dlvhdr/gh-dash"; then
        echo "üì• Installing gh-dash (GitHub CLI Dashboard)..."
        gh extension install github.com/dlvhdr/gh-dash
        echo "‚úÖ gh-dash installed"
    else
        echo "‚úÖ gh-dash already installed"
    fi
else
    echo "‚ö†Ô∏è  GitHub CLI (gh) not found, skipping gh-dash installation"
fi

{{- if eq .chezmoi.os "darwin" }}
# Install Catppuccin theme for Terminal.app
echo ""
THEME_DIR="$HOME/.config/terminal-themes"
if [ ! -f "$THEME_DIR/Catppuccin-Mocha.terminal" ]; then
    echo "üì• Installing Catppuccin theme for Terminal.app..."
    mkdir -p "$THEME_DIR"

    # Download all Catppuccin flavors for Terminal.app
    curl -fsSL -o "$THEME_DIR/Catppuccin-Mocha.terminal" \
        https://raw.githubusercontent.com/catppuccin/Terminal.app/main/themes/catppuccin-mocha.terminal
    curl -fsSL -o "$THEME_DIR/Catppuccin-Macchiato.terminal" \
        https://raw.githubusercontent.com/catppuccin/Terminal.app/main/themes/catppuccin-macchiato.terminal
    curl -fsSL -o "$THEME_DIR/Catppuccin-Frappe.terminal" \
        https://raw.githubusercontent.com/catppuccin/Terminal.app/main/themes/catppuccin-frappe.terminal
    curl -fsSL -o "$THEME_DIR/Catppuccin-Latte.terminal" \
        https://raw.githubusercontent.com/catppuccin/Terminal.app/main/themes/catppuccin-latte.terminal

    echo "‚úÖ Catppuccin themes downloaded to $THEME_DIR"
    echo "   To apply: Terminal.app ‚Üí Settings ‚Üí Profiles ‚Üí Import..."
    echo "   Then select: $THEME_DIR/Catppuccin-Mocha.terminal"
else
    echo "‚úÖ Catppuccin themes already installed"
fi

# Install Nerd Fonts (macOS)
echo ""
echo "üì• Installing Nerd Fonts via Homebrew..."

# Tap the fonts cask if not already tapped
brew tap homebrew/cask-fonts 2>/dev/null || true

# Install MesloLGS NF (for Powerlevel10k)
if ! ls ~/Library/Fonts/ 2>/dev/null | grep -q "MesloLGS NF"; then
    echo "  ‚Üí Installing MesloLGS NF (recommended for Powerlevel10k)..."
    brew install --cask font-meslo-lg-nerd-font
    echo "  ‚úÖ MesloLGS NF installed"
else
    echo "  ‚úÖ MesloLGS NF already installed"
fi

# Install FuraCode NF (for gVim, general use)
if ! ls ~/Library/Fonts/ 2>/dev/null | grep -q "Fura.*Code.*Nerd"; then
    echo "  ‚Üí Installing FuraCode NF (for editors and general use)..."
    brew install --cask font-fira-code-nerd-font
    echo "  ‚úÖ FuraCode NF installed"
else
    echo "  ‚úÖ FuraCode NF already installed"
fi

echo "‚úÖ Nerd Fonts installation complete"
{{- end }}

# Install Ollama models (optional - ~18GB total)
echo ""
if command -v ollama &> /dev/null; then
    echo "üì¶ Ollama is installed. Pull AI models? (~18GB total)"
    echo "   ‚Ä¢ qwen2.5-coder:14b     - 9.0 GB  - Code generation & completion"
    echo "   ‚Ä¢ mistral-nemo:latest   - 7.1 GB  - General purpose LLM"
    echo "   ‚Ä¢ starcoder2:3b         - 1.7 GB  - Fast code completion"
    echo "   ‚Ä¢ nomic-embed-text      - 274 MB  - Text embeddings"
    read -p "Pull Ollama models? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üì• Pulling Ollama models (this may take a while)..."

        echo "  ‚Üí Pulling qwen2.5-coder:14b (9.0 GB)..."
        ollama pull qwen2.5-coder:14b

        echo "  ‚Üí Pulling mistral-nemo:latest (7.1 GB)..."
        ollama pull mistral-nemo:latest

        echo "  ‚Üí Pulling starcoder2:3b (1.7 GB)..."
        ollama pull starcoder2:3b

        echo "  ‚Üí Pulling nomic-embed-text:latest (274 MB)..."
        ollama pull nomic-embed-text:latest

        echo "‚úÖ Ollama models installed"
        echo ""
        echo "üìñ Usage:"
        echo "  ‚Ä¢ ollama run qwen2.5-coder:14b    - Code generation"
        echo "  ‚Ä¢ ollama run mistral-nemo         - Chat/general queries"
        echo "  ‚Ä¢ ollama run starcoder2:3b        - Fast code completion"
        echo "  ‚Ä¢ ollama list                     - List installed models"
    else
        echo "‚è≠Ô∏è  Skipping Ollama models"
        echo "   To install later: ollama pull <model-name>"
    fi
else
    echo "‚ö†Ô∏è  Ollama not installed, skipping model installation"
fi

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "‚úÖ Installation complete!"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo "üìã Installed tools:"
echo ""
echo "Core:"
echo "  ‚Ä¢ git        - Version control"
echo "  ‚Ä¢ gh         - GitHub CLI"
echo "  ‚Ä¢ vim        - Text editor"
echo "  ‚Ä¢ curl       - Data transfer tool"
echo "  ‚Ä¢ jq         - JSON processor"
echo "  ‚Ä¢ node       - JavaScript runtime (includes npm)"
echo "  ‚Ä¢ awscli     - AWS command line interface"
echo "  ‚Ä¢ docker     - Container platform"
echo ""
echo "Terminal multiplexing:"
echo "  ‚Ä¢ tmux       - Terminal multiplexer"
echo "  ‚Ä¢ sesh       - Smart session manager"
echo ""
echo "Navigation & Search:"
echo "  ‚Ä¢ fzf        - Fuzzy finder"
echo "  ‚Ä¢ fd         - Modern find (fast file/directory search)"
echo "  ‚Ä¢ zoxide     - Smart directory jumper"
echo ""
echo "Git tools:"
echo "  ‚Ä¢ delta      - Modern diff pager"
echo "  ‚Ä¢ git-absorb - Automatic fixup commits"
echo "  ‚Ä¢ difftastic - Syntax-aware structural diffs"
echo "  ‚Ä¢ lazygit    - Terminal UI for git"
echo "  ‚Ä¢ gh         - GitHub CLI"
echo "  ‚Ä¢ gh-dash    - GitHub CLI Dashboard extension"
echo ""
echo "CLI tools:"
echo "  ‚Ä¢ eza        - Modern ls replacement"
echo "  ‚Ä¢ bat        - Modern cat with syntax highlighting"
echo "  ‚Ä¢ ripgrep    - Fast search tool (rg)"
echo "  ‚Ä¢ direnv     - Directory-specific environments"
echo "  ‚Ä¢ colordiff  - Colorized diff output"
echo ""
echo "Shell enhancements:"
echo "  ‚Ä¢ zsh-completions - Additional completions"
echo "  ‚Ä¢ zinit       - Zsh plugin manager"
echo "  ‚Ä¢ lesspipe   - Less input preprocessor"
echo "  ‚Ä¢ bc         - Calculator for shell"
echo "  ‚Ä¢ vivid      - LS_COLORS generator"
echo ""
echo "Version managers:"
echo "  ‚Ä¢ pyenv      - Python version manager"
echo "  ‚Ä¢ jenv       - Java version manager"
echo "  ‚Ä¢ nvm        - Node version manager"
echo ""
echo "Build tools:"
echo "  ‚Ä¢ gng        - Gradle/Maven wrapper (gw command)"
echo ""
echo "AI/ML tools:"
echo "  ‚Ä¢ ollama     - Local LLM runtime"
echo ""
echo "Plugin managers:"
echo "  ‚Ä¢ tpm        - Tmux plugin manager"
echo "  ‚Ä¢ zinit      - Zsh plugin manager"
echo "  ‚Ä¢ vim-plug   - Vim plugin manager"
echo ""
echo "Themes:"
echo "  ‚Ä¢ catppuccin - Tmux theme (manually installed)"
echo ""
echo "Zsh plugins (via Zinit):"
echo "  ‚Ä¢ powerlevel10k - Modern zsh theme"
echo "  ‚Ä¢ zsh-autosuggestions - Fish-like suggestions"
echo "  ‚Ä¢ zsh-syntax-highlighting - Command validation"
echo ""
echo "üöÄ Next steps:"
echo "  1. Start a new shell to load all tools"
{{- if eq .chezmoi.os "darwin" }}
echo "  2. Apply Terminal.app theme:"
echo "     ‚Ä¢ Terminal ‚Üí Settings ‚Üí Profiles ‚Üí Import"
echo "     ‚Ä¢ Select: ~/.config/terminal-themes/Catppuccin-Mocha.terminal"
echo "     ‚Ä¢ Set as default profile"
echo "  3. Start tmux: tmux"
echo "  4. Install tmux plugins: Ctrl+a then Shift+I"
echo "  5. Install vim plugins: vim +PlugInstall +qall"
echo "  6. Session manager: Ctrl+a K"
echo "  7. Lazygit in tmux: Ctrl+a g"
echo "  8. Configure p10k: p10k configure (for zsh)"
{{- else }}
echo "  2. Start tmux: tmux"
echo "  3. Install tmux plugins: Ctrl+a then Shift+I"
echo "  4. Install vim plugins: vim +PlugInstall +qall"
echo "  5. Session manager: Ctrl+a K"
echo "  6. Lazygit in tmux: Ctrl+a g"
echo "  7. Configure p10k: p10k configure (for zsh)"
{{- end }}
echo ""
echo "üìñ Git usage:"
echo "  ‚Ä¢ git diff   ‚Üí delta (automatic)"
echo "  ‚Ä¢ git dft    ‚Üí difftastic (structural)"
echo "  ‚Ä¢ git absorb ‚Üí auto-fixup commits"
echo "  ‚Ä¢ git fixup  ‚Üí interactive fixup"
echo "  ‚Ä¢ lazygit    ‚Üí full TUI (or Ctrl+a g in tmux)"
echo "  ‚Ä¢ gh dash    ‚Üí GitHub dashboard (PRs, issues, notifications)"
echo ""
echo "ü§ñ Ollama usage:"
echo "  ‚Ä¢ ollama list                  ‚Üí List installed models"
echo "  ‚Ä¢ ollama run qwen2.5-coder:14b ‚Üí Code generation"
echo "  ‚Ä¢ ollama run mistral-nemo      ‚Üí Chat/general queries"
echo "  ‚Ä¢ ollama pull <model>          ‚Üí Download additional models"
echo ""
