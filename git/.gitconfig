[init]
    defaultBranch = main
  
[core]
    editor = vim
    pager = diff-so-fancy | less --tabs=4 -RFX
    excludesfile = ~/.gitignore_global

[user]
    name = Arun Karunagath
    email = the1.arun@gmail.com

[github]
    user = kra3

[diff]
    tool = vimdiff
    
[merge]                                                                         
    conflictstyle = diff3                                                       
    tool = vimdiff                                                              
    prompt = false   

[commit]
    template = ~/.gitCommitMsg 
    
# Clone git repos with URLs like "gh:kra3/dot_files"
[url "https://github.com/"]
    insteadOf = "gh:"
[url "git@github.com:"]
    pushInsteadOf = "gh:"
    
# Use `origin` as the default remote on the `main` branch in all cases
# [branch "main"]
#    remote = origin
#    merge = refs/heads/main

[alias]
    # Show verbose output about tags, branches or remotes
    tags = tag -l

    b = branch -a
    ba = branch -a
    branches = branch -a
    currentbranch = "!git symbolic-ref --short HEAD"
    
    remotes = remote -v
    r = remote -v
    # prune merged branches from local. run from master or develop.                          
    pmb = "!git fetch -p && git branch -vv | awk '/: gone]/{print $1}'` | xargs git branch -d"  

    # Pretty log output
    hist = log --graph --pretty=format:'%Cred%h%Creset %s%C(yellow)%d%Creset %Cgreen(%cr)%Creset [%an]' --abbrev-commit --date=relative
    oneline = log --pretty=oneline --abbrev-commit --graph

    ctags = !.git/hooks/ctags

    st = status
    ci = commit
    amend = commit --amend
    
    # list branches ordered with latest changed, select with fzf, and checkout  
    coo = "!git branch --sort=-committerdate --no-color --format=\"%(refname:short)\" | fzf | xargs git checkout"
    co = checkout
    cm = checkout main
    nb = checkout -b

    df = diff
    dc = diff --cached
    changes = diff --name-status

    undo = reset --soft HEAD^
    unstage = reset HEAD

    fu = fetch upstream

    publish = "!git push -u origin $(git currentbranch)"
    unpublish = "!git push origin :$(git currentbranch)"

    wip = !git add . && git commit -n -m "WIP"

    # rewrite change-commits GIT_AUTHOR_NAME "old name" "new name"
    # change-commits GIT_AUTHOR_EMAIL "old@email.com" "new@email.com" HEAD~10..HEAD
    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = 227
    frag = magenta bold
    old = red bold
    new = green bold
    commit = 227 bold
    whitespace = red reverse

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22
